function f_password {
  echo "[$SCRIPT_COUNT] Configure modern password policies and PAM security"

  # Install additional security packages
  apt-get -y install libpam-pwquality libpam-google-authenticator libpam-u2f havegd

  if ! grep pam_pwhistory.so "$COMMONPASSWD"; then
    sed -i '/the "Primary" block/apassword\trequired\t\t\tpam_pwhistory.so\tremember=5' "$COMMONPASSWD"
  fi

  cp ./config/pwquality.conf /etc/security/pwquality.conf
  chmod 0644 /etc/security/pwquality.conf

  if grep 'use_authtok try_first_pass sha512' "$COMMONPASSWD"; then
    sed -i 's/try_first_pass sha512.*/try_first_pass sha512 rounds=65536/' "$COMMONPASSWD"
  fi

  sed -i -E 's/(nullok|nullok_secure)//g' "$COMMONAUTH"

  if ! grep retry= "$COMMONPASSWD"; then
    echo 'password requisite pam_pwquality.so retry=3' >> "$COMMONPASSWD"
  fi

  if [ -f "$FAILLOCKCONF" ]; then
    if ! grep faillock "$COMMONAUTH"; then
      sed -i 's/^# audit$/audit/' "$FAILLOCKCONF"
      sed -i 's/^# local_users_only$/local_users_only/' "$FAILLOCKCONF"
      sed -i 's/^# deny.*/deny = 5/' "$FAILLOCKCONF"
      sed -i 's/^# fail_interval.*/fail_interval = 900/' "$FAILLOCKCONF"
      sed -i '/pam_tally.*/d' "$COMMONACCOUNT"
      sed -i 's/auth.*pam_unix.so/auth required pam_faillock.so preauth\nauth [success=1 default=ignore] pam_unix.so\nauth [default=die] pam_faillock.so authfail\nauth sufficient pam_faillock.so authsucc\n/' "$COMMONAUTH"
    fi
    if ! grep faillock "$COMMONACCOUNT"; then
      echo 'account required pam_faillock.so' >> "$COMMONACCOUNT"
    fi
  else
    if ! grep tally2 "$COMMONAUTH"; then
      sed -i '/^$/a auth required pam_tally2.so onerr=fail audit silent deny=5 unlock_time=900' "$COMMONAUTH"
      sed -i '/pam_tally/d' "$COMMONACCOUNT"
    fi
    if ! grep tally2 "$COMMONACCOUNT"; then
      sed -i '/^$/a account required pam_tally2.so' "$COMMONACCOUNT"
    fi
  fi

  sed -i 's/pam_lastlog.so.*/pam_lastlog.so showfailed/' "$PAMLOGIN"
  sed -i 's/delay=.*/delay=4000000/' "$PAMLOGIN"

  cp "./misc/passwords.list" "/usr/share/dict/passwords"
  grep -v '^$' /usr/share/dict/passwords | strings > /usr/share/dict/passwords_text
  update-cracklib

  # Add modern password quality requirements
  cat > /etc/security/pwquality.conf << EOF
# Password length and complexity
minlen = 12
minclass = 4
maxrepeat = 2
maxclassrepeat = 2
gecoscheck = 1

# Dictionary check
dictcheck = 1
usercheck = 1
enforcing = 1

# Entropy requirements
maxsequence = 3
dcredit = -1
ucredit = -1
lcredit = -1
ocredit = -1

# Password history
remember = 5
EOF

  # Configure PAM for password breach detection
  if ! grep -q "pam_pwquality.so" "$COMMONPASSWD"; then
    sed -i '/pam_unix.so/i password requisite pam_pwquality.so retry=3 enforce_for_root' "$COMMONPASSWD"
  fi

  # Enable hardware-based entropy generation
  systemctl enable --now haveged

  # Configure password hashing to use modern algorithm
  if ! grep -q "yescrypt" "$COMMONPASSWD"; then
    sed -i 's/sha512/yescrypt/' "$COMMONPASSWD"
  fi

  # Add password expiration policies
  cat > /etc/login.defs << EOF
# Password aging controls
PASS_MAX_DAYS   90
PASS_MIN_DAYS   1
PASS_WARN_AGE   7

# Password strength
PASS_MIN_LEN    12
PASS_MAX_LEN    128

# Enable SHA512 and yescrypt hashing
ENCRYPT_METHOD yescrypt
SHA_CRYPT_MIN_ROUNDS 500000
SHA_CRYPT_MAX_ROUNDS 5000000
EOF

  # Update system users to comply with new password policies
  chage --maxdays 90 --mindays 1 --warndays 7 -E -1 root
  for user in $(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd); do
    chage --maxdays 90 --mindays 1 --warndays 7 -E -1 "$user"
  done

  ((SCRIPT_COUNT++))
}
